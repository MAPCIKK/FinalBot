from GPT import *
import telebot
from validators import *
from speechkit import *
from DB import *
from telebot.types import *
import math


def get_bot_token():
    with open(BOT_TOKEN_PATH, 'r') as f:
        return f.read().strip()


bot = telebot.TeleBot(get_bot_token())
create_database()


def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


def is_stt_block_limit(user_id, duration):

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –∞—É–¥–∏–æ –±–ª–æ–∫–∏
    audio_blocks = math.ceil(duration / 15)  # –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    # –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞—É–¥–∏–æ –±–ª–æ–∫–æ–≤
    all_blocks = count_all_blocks(user_id) + audio_blocks

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –¥–ª–∏—Ç—Å—è –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
    if duration >= 30:
        msg = "SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥"
        bot.send_message(user_id, msg)
        return None

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º all_blocks —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—É–¥–∏–æ –±–ª–æ–∫–æ–≤
    if all_blocks >= MAX_USER_STT_BLOCKS:
        msg = (f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit STT {MAX_USER_STT_BLOCKS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {all_blocks} –±–ª–æ–∫–æ–≤. "
               f"–î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_STT_BLOCKS - all_blocks}")
        bot.send_message(user_id, msg)
        return None

    return audio_blocks


def is_tts_symbol_limit(message, text):
    user_id = message.from_user.id
    text_symbols = len(text)

# –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏–º–≤–æ–ª–æ–≤
    all_symbols = count_all_symbol(user_id) + text_symbols

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º all_symbols —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∏–º–≤–æ–ª–æ–≤
    if all_symbols >= MAX_USER_TTS_SYMBOLS:
        msg = (f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit TTS {MAX_USER_TTS_SYMBOLS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {all_symbols} —Å–∏–º–≤–æ–ª–æ–≤. "
               f"–î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_TTS_SYMBOLS - all_symbols}")
        bot.send_message(user_id, msg)
        return None

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    if text_symbols >= MAX_TTS_SYMBOLS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SpeechKit TTS –Ω–∞ –∑–∞–ø—Ä–æ—Å {MAX_TTS_SYMBOLS}, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {text_symbols} —Å–∏–º–≤–æ–ª–æ–≤"
        bot.send_message(user_id, msg)
        return None
    return len(text)


def select_n_last_messages(user_id, n_last_messages=4):
    messages = []  # —Å–ø–∏—Å–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    total_spent_tokens = 0  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è
    try:
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("–ü–æ–ª—É—á–∏–ª–æ—Å—å")
        with sqlite3.connect('messages.db') as conn:
            cursor = conn.cursor()
            # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ <n_last_messages> —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
            SELECT message, role, total_gpt_tokens FROM messages WHERE user_id=? ORDER BY id DESC LIMIT ?''',
                           (user_id, n_last_messages))
            data = cursor.fetchall()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º data –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            # –∏ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - data[0]
            if data and data[0]:
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                for message in reversed(data):
                    messages.append({'text': message[0], 'role': message[1]})
                    total_spent_tokens = max(total_spent_tokens, message[2])  # –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return messages, total_spent_tokens
    except Exception as e:
        print('–û—à–∏–±–∫–∞')
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        return messages, total_spent_tokens


# –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤ (<limit_type> - —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –∞—É–¥–∏–æ –±–ª–æ–∫–∏)
def count_all_limits(user_id, limit_type):
    try:
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('messages.db') as conn:
            cursor = conn.cursor()
            # —Å—á–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ <limit_type>, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute(f'''SELECT SUM({limit_type}) FROM messages WHERE user_id=?''', (user_id,))
            data = cursor.fetchone()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º data –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            # –∏ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ –≤ data[0]
            if data and data[0]:
                # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å –∏ data[0] == –∫–∞–∫–æ–º—É-—Ç–æ —á–∏—Å–ª—É, —Ç–æ:
                logging.info(f"DATABASE: –£ user_id={user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {data[0]} {limit_type}")
                return data[0]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ —á–∏—Å–ª–æ - —Å—É–º–º—É –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö <limit_type>
            else:
                # —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö <limit_type>
                return 0  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    except Exception as e:
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        return 0


@bot.message_handler(commands=['debug'])
def debug(message):
    with open('logs.txt', 'rb') as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=['start'])
def start(message):
    logging.info('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start')
    bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üòç! –û—á–µ–Ω—å —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è. '
                                           f'–ú–µ–Ω—è –∑–æ–≤—É—Ç –®—É—Ä–∏–∫ –∏ —è –±—É–¥—É —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–ºü´°.'
                                           f'\n \n–ú–æ–≥—É –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–ª–∏ –æ–±—â–∞—Ç—å—Å—è ...–≥–æ–ª–æ—Å–æ–≤—ã–º–∏!üòÆ'
                                           f'\n \n–ó–Ω–∞—é –ø–æ—á—Ç–∏ –æ–±–æ –≤—Å–µ–º –Ω–∞ —Å–≤–µ—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –º–µ–Ω—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —á–µ–º —Ö–æ—á–µ—à—å!üëå'
                                           f'\n \n–í—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É –∏ –ø–æ–¥–¥–µ—Ä–∂—É, –Ω–µ –æ—Å—Ç–∞–≤–ª—é –≤ –±–µ–¥–µ!üòâ'
                                           f'\n \n–ß—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ!'
                                           f'\n \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø—Ä–æ—á–µ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, '
                                           f'\n–Ω–∞–∂–º–∏ /help', reply_markup=create_keyboard(["/help", '/start']))


@bot.message_handler(commands=['help'])
def help_the_user(message):
    bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, –º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name}.'
                                           f'\n \n–≠—Ç–æ @MAPPPC, –∞–≤—Ç–æ—Ä –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.'
                                           f'\n \n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YandexGPT2 –∏ Yandex Speechkit'
                                           f'\n \n–ë–æ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ - —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å GPT, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ.'
                                           f'\n \n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–µ–Ω—é" –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.'
                                           f'\n \n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è - –ø–∏—à–∏—Ç–µ –º–Ω–µ, —è –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞'
                                           f'\n \n*–£–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!*üòâ', reply_markup=create_keyboard(["/help", '/start']))


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:

        # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
        status_check_users, error_message = check_number_of_users(message.from_user.id)
        if not status_check_users:
            bot.send_message(message.from_user.id, error_message)  # –º–µ—Å—Ç –Ω–µ—Ç =(
            return

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_message(user_id=message.from_user.id, message=message.text, role='user',
                    total_gpt_tokens=count_tokens(message.text), tts_symbols='0', stt_blocks='0')

        # –í–ê–õ–ò–î–ê–¶–ò–Ø: —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é GPT-—Ç–æ–∫–µ–Ω–æ–≤
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 (COUNT_LAST_MSG) —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = select_n_last_messages(message.from_user.id, COUNT_LAST_MSG)
        print(last_messages)
        # –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(message.from_user.id, error_message)
            return

        # GPT: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        # GPT: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        if not status_gpt:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(message.from_user.id, answer_gpt)
            return
        # —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ GPT
        total_gpt_tokens += tokens_in_answer

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_message(user_id=message.from_user.id, message=answer_gpt, role='assistant',
                    total_gpt_tokens=(count_tokens(answer_gpt) + count_tokens(message.text)), tts_symbols='0', stt_blocks='0')

        bot.send_message(message.from_user.id, answer_gpt, reply_to_message_id=message.id)  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–º
    except Exception as e:
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.message_handler(content_types=['voice'])
def handle_voice(message: telebot.types.Message):
    user_id = message.from_user.id
    stt_blocks = is_stt_block_limit(message.from_user.id, message.voice.duration)
    if not stt_blocks:
        return

    file_id = message.voice.file_id  # –ø–æ–ª—É—á–∞–µ–º id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_info = bot.get_file(file_id)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    file = bot.download_file(file_info.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SpeechKit
    status, text = speech_to_text(file)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if status:
        add_message(user_id=message.from_user.id, message=text, role='user',
                    total_gpt_tokens=int(count_tokens(text)), tts_symbols='0',
                    stt_blocks=stt_blocks)
        print(select_n_last_messages(message.from_user.id)[0])
        success, answer, tokens = ask_gpt(select_n_last_messages(message.from_user.id)[0])
        if success:
            text_symbol = is_tts_symbol_limit(message, text)
            if text_symbol is None:
                return

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ë–î

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SpeechKit
            status, content = text_to_speech(answer)

            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if status:
                add_message(user_id=message.from_user.id, message=answer, role='assistant',
                            total_gpt_tokens=(int(count_tokens(text)) + int(count_tokens(answer))),
                            tts_symbols=text_symbol, stt_blocks='0')
                bot.send_voice(user_id, content)
            else:
                bot.send_message(user_id, content)
        else:
            bot.send_message(user_id, '–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –û–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ, '
                                      '–ø–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —ç—Ç–æ—Ç –∂–µ —Å–∞–º—ã–π, –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.')
    else:
        bot.send_message(user_id, text)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda: True)
def handler(message):
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É")
bot.polling()
